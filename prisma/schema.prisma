// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  tasks         Task[]
  financeRecords FinanceRecord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  niche        String?
  description  String?
  repoUrl      String?
  repoFullName String?
  githubRepo   String?   // Keep for backward compatibility
  stack        String    @default("firebase") // firebase | supabase
  status       String    @default("planning") // planning | development | deployed | archived
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks        Task[]
  checklists   Checklist[]
  financeRecords FinanceRecord[]
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("todo") // todo | in_progress | done
  priority    String   @default("medium") // low | medium | high
  sprint      String   @default("sprint0") // sprint0 | sprint1 | sprint2
  category    String   @default("development") // development | qa | growth | ux
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   String
  userId      String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Checklist {
  id         String   @id @default(cuid())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  type       String   // "QA_RELEASE" | "GROWTH_LAUNCH" | "UX_RETENTION"
  title      String
  items      Json     // [{id, label, done}]
  progress   Int      @default(0) // 0..100
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FinanceRecord {
  id          String   @id @default(cuid())
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  category    String   // infra | tool | subscription | user_cost
  provider    String   // firebase | supabase | cursor | chatgpt | vercel | other
  description String
  amount      Float
  currency    String   @default("BRL")
  recurring   Boolean  @default(false)
  period      String?  // monthly | yearly | one-time
  userIdExternal String? // opcional: custo por usu√°rio (id externo)
  createdAt   DateTime @default(now())
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}
